package actions

import (
	"doors/models"
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"github.com/gofrs/uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (AccessGroup)
// DB Table: Plural (access_groups)
// Resource: Plural (AccessGroups)
// Path: Plural (/access_groups)
// View Template Folder: Plural (/templates/access_groups/)

// AccessGroupsResource is the resource for the AccessGroup model
type AccessGroupsResource struct {
	buffalo.Resource
}

// List gets all AccessGroups. This function is mapped to the path
// GET /access_groups
func (v AccessGroupsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	accessGroups := &models.AccessGroups{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all AccessGroups from the DB
	if err := q.All(accessGroups); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("accessGroups", accessGroups)
		return c.Render(http.StatusOK, r.HTML("/access_groups/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(accessGroups))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(accessGroups))
	}).Respond(c)
}

// Show gets the data for one AccessGroup. This function is mapped to
// the path GET /access_groups/{access_group_id}
func (v AccessGroupsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AccessGroup
	accessGroup := &models.AccessGroup{}

	// To find the AccessGroup the parameter access_group_id is used.
	if err := tx.Find(accessGroup, c.Param("access_group_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("accessGroup", accessGroup)

		return c.Render(http.StatusOK, r.HTML("/access_groups/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(accessGroup))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(accessGroup))
	}).Respond(c)
}

// New renders the form for creating a new AccessGroup.
// This function is mapped to the path GET /access_groups/new
func (v AccessGroupsResource) New(c buffalo.Context) error {
	c.Set("accessGroup", &models.AccessGroup{})

	doors := &models.Doors{}

	if err := set_doors(c, doors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	openingDoors := make(map[uuid.UUID]bool)

	if err := set_opening_doors(c, doors, openingDoors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(http.StatusOK, r.HTML("/access_groups/new.plush.html"))
}

// Create adds a AccessGroup to the DB. This function is mapped to the
// path POST /access_groups
func (v AccessGroupsResource) Create(c buffalo.Context) error {
	// Allocate an empty AccessGroup
	accessGroup := &models.AccessGroup{}

	// Bind accessGroup to the html form elements
	if err := c.Bind(accessGroup); err != nil {
		return err
	}

	doors := &models.Doors{}

	if err := set_doors(c, doors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	openingDoors := make(map[uuid.UUID]bool)

	if err := set_opening_doors(c, doors, openingDoors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(accessGroup)
	if err != nil {
		return err
	}

	// create accessGroupDoors relation for each checked door
	for doorID, open := range openingDoors {
		// leave loop if we have errors
		if verrs.HasAny() {
			break
		}
		// door checked => create relation
		if open {
			accessGroupDoor := &models.AccessGroupDoor{
				AccessGroupID: accessGroup.ID,
				DoorID:        doorID,
			}

			// Validate the data from the html form
			verrs, err = tx.ValidateAndCreate(accessGroupDoor)
			if err != nil {
				return err
			}
		}
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("accessGroup", accessGroup)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/access_groups/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "accessGroup.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/access_groups/%v", accessGroup.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(accessGroup))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(accessGroup))
	}).Respond(c)
}

// Edit renders a edit form for a AccessGroup. This function is
// mapped to the path GET /access_groups/{access_group_id}/edit
func (v AccessGroupsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AccessGroup
	accessGroup := &models.AccessGroup{}

	if err := tx.Find(accessGroup, c.Param("access_group_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	doors := &models.Doors{}

	if err := set_doors(c, doors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	openingDoors := make(map[uuid.UUID]bool)

	if err := set_opening_doors(c, doors, openingDoors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Set helper for checkbox active
	c.Set("formID", func(id uuid.UUID) string {
		return fmt.Sprintf("door-%s", id.String())
	})

	c.Set("accessGroup", accessGroup)
	return c.Render(http.StatusOK, r.HTML("/access_groups/edit.plush.html"))
}

// Update changes a AccessGroup in the DB. This function is mapped to
// the path PUT /access_groups/{access_group_id}
func (v AccessGroupsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AccessGroup
	accessGroup := &models.AccessGroup{}

	if err := tx.Find(accessGroup, c.Param("access_group_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind AccessGroup to the html form elements
	if err := c.Bind(accessGroup); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(accessGroup)
	if err != nil {
		return err
	}

	doors := &models.Doors{}

	if err := set_doors(c, doors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	openingDoors := make(map[uuid.UUID]bool)

	if err := set_opening_doors(c, doors, openingDoors); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	door := models.Door{}

	// create accessGroupDoors relation for each checked door
	for doorID, open := range openingDoors {
		// leave loop if we have errors
		if verrs.HasAny() {
			break
		}
		// door checked => add door to accessGroup
		if open {

			if err := tx.Eager().Find(door, doorID); err != nil {
				return c.Error(http.StatusNotFound, err)
			}

			verrs, err = accessGroup.AddDoor(tx, &door)
			if err != nil {
				return err
			}

		}
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("accessGroup", accessGroup)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/access_groups/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "accessGroup.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/access_groups/%v", accessGroup.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(accessGroup))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(accessGroup))
	}).Respond(c)
}

// Destroy deletes a AccessGroup from the DB. This function is mapped
// to the path DELETE /access_groups/{access_group_id}
func (v AccessGroupsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty AccessGroup
	accessGroup := &models.AccessGroup{}

	// To find the AccessGroup the parameter access_group_id is used.
	if err := tx.Find(accessGroup, c.Param("access_group_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(accessGroup); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "accessGroup.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/access_groups")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(accessGroup))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(accessGroup))
	}).Respond(c)
}
